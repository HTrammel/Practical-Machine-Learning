install.packages("AppliedPredictiveModeling")
install.packages(c("caret", "lme4"))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(data=training, x=Superplasticizer)
qplot(data=training, x=log(Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
source('C:/GitHub/Coursera/pml_learn/junk2.R')
install.packages("caret")
install.packages("caret", dependencies = c("Depends","Suggests"))
install.packages("rpython")
install.packages("printr")
install.packages("AdvancedPredictiveModels")
install.packages("AppliedPredictiveModeling")
install.packages("ISL")
install.packages("ISLR")
source('C:/GitHub/Coursera/pml_learn/junk.R')
source('C:/GitHub/Coursera/pml_learn/junk2.R')
install.packages(c("ElemStatLearn", "pgmm", "rpart"))
install.packages("tree")
source('C:/GitHub/Coursera/pml_learn/junk3.R')
View(where)
source('C:/GitHub/Coursera/pml_learn/junk3.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/Junk4.R')
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
vtrain_fit$finalModel
source('~/Github/Coursera/pml_learn/junk5.R')
vimp$importance
sort(vimp$importance)
source('~/Github/Coursera/pml_learn/junk5.R')
sort(vimp$importance,decreasing = decreasing)
source('~/Github/Coursera/pml_learn/junk5.R')
sort(vimp$importance,decreasing = TRUE)
?rarrange
?"dplyr"
browseVignettes(package = "dplyr")
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
imp
sort(imp[,1])
arrange(imp, Overall)
imp
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
predict(vtrain_fit, vtest, type="response")
predict(vtrain_fit, vtest)
source('~/Github/Coursera/pml_learn/junk5.R')
vimp <- varImp(vtrain_fit, scale=T)
imp <- vimp$importance
print(imp)
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
source('~/Github/Coursera/pml_learn/junk5.R')
varImp(y ~., method="rf", data-vtrain)
varImp(vtrain)
varImpPlot(vtrain_fit)
source('~/Github/Coursera/pml_learn/junk5.R')
randomForest(y ~ ., data=vtrain)
vrf <- randomForest(y ~ ., data=vtrain)
varImp(vrf)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages(c("BIFIEsurvey", "coda", "coin", "copula", "DescTools", "doParallel", "fields", "foreach", "gstat", "iterators", "lme4", "maxLik", "mclust", "mgcv", "mitml", "plotrix", "readr", "rjags", "RUnit", "snowfall", "sp", "stringi", "TAM", "testthat"))
install.packages(c("lme4", "mclust", "rjags", "sp"))
install.packages(c("mclust", "rjags"))
install.packages("rjags")
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
source('~/Github/Coursera/pml_learn/quiz4-1.R')
summary(forest_mod)
forest_mod$metric
forest_mod$modelInfo
forest_mod$results
boost_mod$results
source('~/Github/Coursera/pml_learn/quiz4-1.R')
boost_mod$results
rf_pred
summary(rf_pred)
summary(bst_pred)
compare_models(forest_mod, boost_mod)
source('~/Github/Coursera/pml_learn/quiz4-2.R')
source('~/Github/Coursera/pml_learn/quiz4-2.R')
source('~/Github/Coursera/pml_learn/quiz4-2.R')
print(rf_mod)
print(bt_mod)
ld_mod
str(ld_mod)
source('~/Github/Coursera/pml_learn/quiz4-2.R')
df <- data.frame(pred_rf, pred_bt)
source('~/Github/Coursera/pml_learn/quiz4-2.R')
source('~/Github/Coursera/pml_learn/quiz4-2.R')
df <- data.frame(pred_rf, pred_bt)
df2 <- data.frame(df, pred_ld)
df2 <- data.frame(df, pred_ld, diagnosis=training$diagnosis)
df <- data.frame(pred_rf, pred_bt, pred_ld)
?plot.enet
source('~/Github/Coursera/pml_learn/quiz4-3.R')
?plot.enet
?plot
install.packages("glmnet")
?plot.enet
data(diabetes)
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
source('~/Github/Coursera/pml_learn/quiz4-3.R')
source('~/Github/Coursera/pml_learn/quiz4-3.R')
source('~/Github/Coursera/pml_learn/quiz4-3.R')
source('~/Github/Coursera/pml_learn/quiz4-3.R')
source('~/Github/Coursera/pml_learn/quiz4-3.R')
source('~/Github/Coursera/pml_learn/quiz4-4.R')
source('~/Github/Coursera/pml_learn/quiz4-5.R')
source('~/Github/Coursera/pml_learn/quiz4-5.R')
